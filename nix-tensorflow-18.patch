diff --git a/pkgs/build-support/build-bazel-package/default.nix b/pkgs/build-support/build-bazel-package/default.nix
index 349a7e5aa33..ec1748359ed 100644
--- a/pkgs/build-support/build-bazel-package/default.nix
+++ b/pkgs/build-support/build-bazel-package/default.nix
@@ -16,6 +16,8 @@ in stdenv.mkDerivation (fBuildAttrs // {
 
     nativeBuildInputs = fFetchAttrs.nativeBuildInputs or [] ++ [ bazel ];
 
+    dontAddPrefix = true;
+
     preHook = fFetchAttrs.preHook or "" + ''
       export bazelOut="$NIX_BUILD_TOP/output"
       export HOME="$NIX_BUILD_TOP"
@@ -52,7 +54,7 @@ in stdenv.mkDerivation (fBuildAttrs // {
     outputHash = fetchAttrs.sha256;
   });
 
-  nativeBuildInputs = fBuildAttrs.nativeBuildInputs or [] ++ [ (bazel.override { enableNixHacks = true; }) ];
+  nativeBuildInputs = fBuildAttrs.nativeBuildInputs or [] ++ [ (bazel.override { enableNixHacks = false; }) ];
 
   preHook = fBuildAttrs.preHook or "" + ''
     export bazelOut="$NIX_BUILD_TOP/output"
diff --git a/pkgs/development/python-modules/tensorflow/default.nix b/pkgs/development/python-modules/tensorflow/default.nix
index 8d2d6fa9c14..2abebbb32ef 100644
--- a/pkgs/development/python-modules/tensorflow/default.nix
+++ b/pkgs/development/python-modules/tensorflow/default.nix
@@ -1,6 +1,6 @@
 { stdenv, buildBazelPackage, lib, fetchFromGitHub, fetchpatch, symlinkJoin
 , buildPythonPackage, isPy3k, pythonOlder, pythonAtLeast
-, which, swig, binutils, glibcLocales
+, which, swig, binutils, glibcLocales, writeShellScriptBin
 , python, jemalloc, openmpi
 , numpy, six, protobuf, tensorflow-tensorboard, backports_weakref, mock, enum34, absl-py
 , cudaSupport ? false, nvidia_x11 ? null, cudatoolkit ? null, cudnn ? null
@@ -31,7 +31,7 @@ let
 
   tfFeature = x: if x then "1" else "0";
 
-  version = "1.5.0";
+  version = "1.8.0";
 
   pkg = buildBazelPackage rec {
     name = "tensorflow-build-${version}";
@@ -40,26 +40,27 @@ let
       owner = "tensorflow";
       repo = "tensorflow";
       rev = "v${version}";
-      sha256 = "1c4djsaip901nasm7a6dsimr02bsv70a7b1g0kysb4n39qpdh22q";
+      sha256 = "18hydad4d61qg5ji7frcbmhb1l09s122n9hl7ic0nqq6j786acvv";
     };
 
-    patches = [
-      # Fix build with Bazel >= 0.10
-      (fetchpatch {
-        url = "https://github.com/tensorflow/tensorflow/commit/6fcfab770c2672e2250e0f5686b9545d99eb7b2b.patch";
-        sha256 = "0p61za1mx3a7gj1s5lsps16fcw18iwnvq2b46v1kyqfgq77a12vb";
-      })
-      (fetchpatch {
-        url = "https://github.com/tensorflow/tensorflow/commit/3f57956725b553d196974c9ad31badeb3eabf8bb.patch";
-        sha256 = "11dja5gqy0qw27sc9b6yw9r0lfk8dznb32vrqqfcnypk2qmv26va";
-      })
-    ];
+    # patches = [
+    #   # Fix build with Bazel >= 0.10
+    #   (fetchpatch {
+    #     url = "https://github.com/tensorflow/tensorflow/commit/6fcfab770c2672e2250e0f5686b9545d99eb7b2b.patch";
+    #     sha256 = "0p61za1mx3a7gj1s5lsps16fcw18iwnvq2b46v1kyqfgq77a12vb";
+    #   })
+    #   (fetchpatch {
+    #     url = "https://github.com/tensorflow/tensorflow/commit/3f57956725b553d196974c9ad31badeb3eabf8bb.patch";
+    #     sha256 = "11dja5gqy0qw27sc9b6yw9r0lfk8dznb32vrqqfcnypk2qmv26va";
+    #   })
+    # ];
 
     nativeBuildInputs = [ swig which ];
 
     buildInputs = [ python jemalloc openmpi glibcLocales numpy ]
       ++ lib.optionals cudaSupport [ cudatoolkit cudnn nvidia_x11 ];
 
+
     preConfigure = ''
       patchShebangs configure
 
@@ -69,6 +70,7 @@ let
       export TF_NEED_HDFS=1
       export TF_ENABLE_XLA=${tfFeature xlaSupport}
       export CC_OPT_FLAGS=" "
+      export hardeningDisable="all";
       # https://github.com/tensorflow/tensorflow/issues/14454
       export TF_NEED_MPI=${tfFeature cudaSupport}
       export TF_NEED_CUDA=${tfFeature cudaSupport}
@@ -88,6 +90,31 @@ let
 
     hardeningDisable = [ "all" ];
 
+    # gccnh = writeShellScriptBin "gcc" ''
+    #   exec "${stdenv.cc}/bin/gcc" "''${extraFlagsArray[@]}" "$@" -U_FORTIFY_SOURCE
+    # '';
+
+
+    gccnh = stdenv.mkDerivation {
+      name = "gccnh";
+      buildCommand = ''
+        . $stdenv/setup
+        mkdir -p $out/bin
+
+        for prog in as  c++  cc  cpp  g++  ld  ld.bfd  ld.gold ; do
+          ln -s ${stdenv.cc}/bin/$prog $out/bin/$prog
+        done
+
+        cat >$out/bin/gcc <<"EOF"
+        #!/bin/sh
+        export hardeningDisable=all
+        exec "${stdenv.cc}/bin/gcc" "''${extraFlagsArray[@]}" "$@"
+        EOF
+        chmod +x $out/bin/gcc
+        '';
+    };
+
+
     bazelFlags = [ "--config=opt" ]
                  ++ lib.optional sse42Support "--copt=-msse4.2"
                  ++ lib.optional avx2Support "--copt=-mavx2"
diff --git a/pkgs/top-level/all-packages.nix b/pkgs/top-level/all-packages.nix
index d7cb6006b8c..49bf0237eb9 100644
--- a/pkgs/top-level/all-packages.nix
+++ b/pkgs/top-level/all-packages.nix
@@ -7474,8 +7474,38 @@ with pkgs;
   bazel_0_4 = callPackage ../development/tools/build-managers/bazel/0.4.nix { };
   bazel = callPackage ../development/tools/build-managers/bazel { };
 
+  bazel_huawei = callPackage ../development/tools/build-managers/bazel { 
+    jdk = oraclejdk8_huawei;
+  };
+
+  oraclejdk8_huawei = lib.overrideDerivation oraclejdk8 (oldAttrs: rec {
+        name = oldAttrs.name + "-yz01";
+        certs = /etc/ssl/certs/ca-certificates.crt;
+        installPhase = ''
+          ${oldAttrs.installPhase}
+          # split bundled ca-certificates into separate files 'cert.N.pem'
+          keytool=${oraclejdk8}/bin/keytool
+          keystore=$jrePath/lib/security/cacerts
+          pems_dir=pems
+          mkdir "$pems_dir"
+          pushd "$pems_dir"
+          awk 'BEGIN {c=0;doPrint=0;} /END CERT/ {print > "cert." c ".pem";doPrint=0;} /BEGIN CERT/{c++;doPrint=1;} { if(doPrint == 1) {print > "cert." c ".pem"} }' < ${certs}
+          # import certificates
+          for f in `ls cert.*.pem`; do
+            alias=`basename $f`
+            echo $keytool -import -trustcacerts -noprompt -keystore "$keystore" -alias "$alias" -file "$f" -storepass changeit;
+            $keytool -import -trustcacerts -noprompt -keystore "$keystore" -alias "$alias" -file "$f" -storepass changeit;
+          done
+          popd
+        '';
+    });
+
   buildBazelPackage = callPackage ../build-support/build-bazel-package { };
 
+  buildBazelPackage_huawei = callPackage ../build-support/build-bazel-package {
+    bazel = bazel_huawei;
+  };
+
   bear = callPackage ../development/tools/build-managers/bear { };
 
   bin_replace_string = callPackage ../development/tools/misc/bin_replace_string { };
diff --git a/pkgs/top-level/python-packages.nix b/pkgs/top-level/python-packages.nix
index 10bbe8c1c40..6ff70534d61 100644
--- a/pkgs/top-level/python-packages.nix
+++ b/pkgs/top-level/python-packages.nix
@@ -19902,6 +19902,16 @@ EOF
       cudnn = pkgs.cudnn_cudatoolkit9;
     };
 
+  tensorflow_noavx =
+    callPackage ../development/python-modules/tensorflow rec {
+      buildBazelPackage = pkgs.buildBazelPackage_huawei;
+      cudaSupport = pkgs.config.cudaSupport or false;
+      inherit (pkgs.linuxPackages) nvidia_x11;
+      cudatoolkit = pkgs.cudatoolkit9;
+      cudnn = pkgs.cudnn_cudatoolkit9;
+      avx2Support = false;
+    };
+
   tensorflowWithoutCuda = self.tensorflow.override {
     cudaSupport = false;
   };
